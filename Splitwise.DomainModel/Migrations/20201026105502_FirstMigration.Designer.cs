// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Splitwise.DomainModel;

namespace Splitwise.DomainModel.Migrations
{
    [DbContext(typeof(SplitwiseDbContext))]
    [Migration("20201026105502_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Expense", b =>
                {
                    b.Property<int>("expenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("expenseAdderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("expenseCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("expenseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("expenseGroupId")
                        .HasColumnType("int");

                    b.Property<string>("expenseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("expenseSplitBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("expenseTotalAmount")
                        .HasColumnType("float");

                    b.HasKey("expenseId");

                    b.HasIndex("expenseAdderId");

                    b.HasIndex("expenseGroupId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("userFriendId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userFriendId");

                    b.HasIndex("userId");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Group", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("groupCreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("groupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("groupId");

                    b.HasIndex("groupCreatorId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Payee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("expenseId")
                        .HasColumnType("int");

                    b.Property<string>("payeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("payeeShare")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("expenseId");

                    b.HasIndex("payeeId");

                    b.ToTable("Payee");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Payer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("amountPaid")
                        .HasColumnType("float");

                    b.Property<int>("expenseId")
                        .HasColumnType("int");

                    b.Property<string>("payerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("expenseId");

                    b.HasIndex("payerId");

                    b.ToTable("Payer");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Settlement", b =>
                {
                    b.Property<int>("settlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("settlementExpenseId")
                        .HasColumnType("int");

                    b.Property<int?>("settlementGroupId")
                        .HasColumnType("int");

                    b.Property<double>("transactionAmount")
                        .HasColumnType("float");

                    b.Property<string>("userPayingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("userRecievingId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("settlementId");

                    b.HasIndex("settlementExpenseId");

                    b.HasIndex("settlementGroupId");

                    b.HasIndex("userPayingId");

                    b.HasIndex("userRecievingId");

                    b.ToTable("Settlement");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("userFullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("groupId");

                    b.HasIndex("userId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splitwise.DomainModel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Expense", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.User", "expenseAdder")
                        .WithMany()
                        .HasForeignKey("expenseAdderId");

                    b.HasOne("Splitwise.DomainModel.Models.Group", "expenseGroup")
                        .WithMany()
                        .HasForeignKey("expenseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Friend", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.User", "userFriend")
                        .WithMany()
                        .HasForeignKey("userFriendId");

                    b.HasOne("Splitwise.DomainModel.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Group", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.User", "groupCreator")
                        .WithMany()
                        .HasForeignKey("groupCreatorId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Payee", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.Expense", "expense")
                        .WithMany()
                        .HasForeignKey("expenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splitwise.DomainModel.Models.User", "payee")
                        .WithMany()
                        .HasForeignKey("payeeId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Payer", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.Expense", "expense")
                        .WithMany()
                        .HasForeignKey("expenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splitwise.DomainModel.Models.User", "payer")
                        .WithMany()
                        .HasForeignKey("payerId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.Settlement", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.Expense", "settlementExpense")
                        .WithMany()
                        .HasForeignKey("settlementExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splitwise.DomainModel.Models.Group", "group")
                        .WithMany()
                        .HasForeignKey("settlementGroupId");

                    b.HasOne("Splitwise.DomainModel.Models.User", "userPaying")
                        .WithMany()
                        .HasForeignKey("userPayingId");

                    b.HasOne("Splitwise.DomainModel.Models.User", "userRecieving")
                        .WithMany()
                        .HasForeignKey("userRecievingId");
                });

            modelBuilder.Entity("Splitwise.DomainModel.Models.UserGroup", b =>
                {
                    b.HasOne("Splitwise.DomainModel.Models.Group", "group")
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splitwise.DomainModel.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");
                });
#pragma warning restore 612, 618
        }
    }
}
